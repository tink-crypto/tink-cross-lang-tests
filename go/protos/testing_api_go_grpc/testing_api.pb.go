// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.0
// 	protoc        v5.26.1
// source: go/protos/testing_api.proto

package testing_api_go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeysetReaderType int32

const (
	KeysetReaderType_KEYSET_READER_UNKNOWN KeysetReaderType = 0
	KeysetReaderType_KEYSET_READER_BINARY  KeysetReaderType = 1
	KeysetReaderType_KEYSET_READER_JSON    KeysetReaderType = 2
)

// Enum value maps for KeysetReaderType.
var (
	KeysetReaderType_name = map[int32]string{
		0: "KEYSET_READER_UNKNOWN",
		1: "KEYSET_READER_BINARY",
		2: "KEYSET_READER_JSON",
	}
	KeysetReaderType_value = map[string]int32{
		"KEYSET_READER_UNKNOWN": 0,
		"KEYSET_READER_BINARY":  1,
		"KEYSET_READER_JSON":    2,
	}
)

func (x KeysetReaderType) Enum() *KeysetReaderType {
	p := new(KeysetReaderType)
	*p = x
	return p
}

func (x KeysetReaderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeysetReaderType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_protos_testing_api_proto_enumTypes[0].Descriptor()
}

func (KeysetReaderType) Type() protoreflect.EnumType {
	return &file_go_protos_testing_api_proto_enumTypes[0]
}

func (x KeysetReaderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeysetReaderType.Descriptor instead.
func (KeysetReaderType) EnumDescriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{0}
}

type KeysetWriterType int32

const (
	KeysetWriterType_KEYSET_WRITER_UNKNOWN KeysetWriterType = 0
	KeysetWriterType_KEYSET_WRITER_BINARY  KeysetWriterType = 1
	KeysetWriterType_KEYSET_WRITER_JSON    KeysetWriterType = 2
)

// Enum value maps for KeysetWriterType.
var (
	KeysetWriterType_name = map[int32]string{
		0: "KEYSET_WRITER_UNKNOWN",
		1: "KEYSET_WRITER_BINARY",
		2: "KEYSET_WRITER_JSON",
	}
	KeysetWriterType_value = map[string]int32{
		"KEYSET_WRITER_UNKNOWN": 0,
		"KEYSET_WRITER_BINARY":  1,
		"KEYSET_WRITER_JSON":    2,
	}
)

func (x KeysetWriterType) Enum() *KeysetWriterType {
	p := new(KeysetWriterType)
	*p = x
	return p
}

func (x KeysetWriterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeysetWriterType) Descriptor() protoreflect.EnumDescriptor {
	return file_go_protos_testing_api_proto_enumTypes[1].Descriptor()
}

func (KeysetWriterType) Type() protoreflect.EnumType {
	return &file_go_protos_testing_api_proto_enumTypes[1]
}

func (x KeysetWriterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeysetWriterType.Descriptor instead.
func (KeysetWriterType) EnumDescriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{1}
}

// Used to represent the JSON null value.
type NullValue int32

const (
	NullValue_NULL_VALUE NullValue = 0
)

// Enum value maps for NullValue.
var (
	NullValue_name = map[int32]string{
		0: "NULL_VALUE",
	}
	NullValue_value = map[string]int32{
		"NULL_VALUE": 0,
	}
)

func (x NullValue) Enum() *NullValue {
	p := new(NullValue)
	*p = x
	return p
}

func (x NullValue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NullValue) Descriptor() protoreflect.EnumDescriptor {
	return file_go_protos_testing_api_proto_enumTypes[2].Descriptor()
}

func (NullValue) Type() protoreflect.EnumType {
	return &file_go_protos_testing_api_proto_enumTypes[2]
}

func (x NullValue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NullValue.Descriptor instead.
func (NullValue) EnumDescriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{2}
}

type ServerInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ServerInfoRequest) Reset() {
	*x = ServerInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoRequest) ProtoMessage() {}

func (x *ServerInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoRequest.ProtoReflect.Descriptor instead.
func (*ServerInfoRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{0}
}

type ServerInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TinkVersion string `protobuf:"bytes,1,opt,name=tink_version,json=tinkVersion,proto3" json:"tink_version,omitempty"` // For example '1.4'
	Language    string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`                          // For example 'cc', 'java', 'go' or 'python'.
}

func (x *ServerInfoResponse) Reset() {
	*x = ServerInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerInfoResponse) ProtoMessage() {}

func (x *ServerInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerInfoResponse.ProtoReflect.Descriptor instead.
func (*ServerInfoResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{1}
}

func (x *ServerInfoResponse) GetTinkVersion() string {
	if x != nil {
		return x.TinkVersion
	}
	return ""
}

func (x *ServerInfoResponse) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type KeysetTemplateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TemplateName string `protobuf:"bytes,1,opt,name=template_name,json=templateName,proto3" json:"template_name,omitempty"` // template name used by Tinkey
}

func (x *KeysetTemplateRequest) Reset() {
	*x = KeysetTemplateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetTemplateRequest) ProtoMessage() {}

func (x *KeysetTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetTemplateRequest.ProtoReflect.Descriptor instead.
func (*KeysetTemplateRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{2}
}

func (x *KeysetTemplateRequest) GetTemplateName() string {
	if x != nil {
		return x.TemplateName
	}
	return ""
}

type KeysetTemplateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetTemplateResponse_KeyTemplate
	//	*KeysetTemplateResponse_Err
	Result isKeysetTemplateResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetTemplateResponse) Reset() {
	*x = KeysetTemplateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetTemplateResponse) ProtoMessage() {}

func (x *KeysetTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetTemplateResponse.ProtoReflect.Descriptor instead.
func (*KeysetTemplateResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{3}
}

func (m *KeysetTemplateResponse) GetResult() isKeysetTemplateResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetTemplateResponse) GetKeyTemplate() []byte {
	if x, ok := x.GetResult().(*KeysetTemplateResponse_KeyTemplate); ok {
		return x.KeyTemplate
	}
	return nil
}

func (x *KeysetTemplateResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetTemplateResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetTemplateResponse_Result interface {
	isKeysetTemplateResponse_Result()
}

type KeysetTemplateResponse_KeyTemplate struct {
	KeyTemplate []byte `protobuf:"bytes,1,opt,name=key_template,json=keyTemplate,proto3,oneof"` // serialized google.crypto.tink.KeyTemplate.
}

type KeysetTemplateResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetTemplateResponse_KeyTemplate) isKeysetTemplateResponse_Result() {}

func (*KeysetTemplateResponse_Err) isKeysetTemplateResponse_Result() {}

type KeysetGenerateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template []byte `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"` // serialized google.crypto.tink.KeyTemplate.
}

func (x *KeysetGenerateRequest) Reset() {
	*x = KeysetGenerateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetGenerateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetGenerateRequest) ProtoMessage() {}

func (x *KeysetGenerateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetGenerateRequest.ProtoReflect.Descriptor instead.
func (*KeysetGenerateRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{4}
}

func (x *KeysetGenerateRequest) GetTemplate() []byte {
	if x != nil {
		return x.Template
	}
	return nil
}

type KeysetGenerateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetGenerateResponse_Keyset
	//	*KeysetGenerateResponse_Err
	Result isKeysetGenerateResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetGenerateResponse) Reset() {
	*x = KeysetGenerateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetGenerateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetGenerateResponse) ProtoMessage() {}

func (x *KeysetGenerateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetGenerateResponse.ProtoReflect.Descriptor instead.
func (*KeysetGenerateResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{5}
}

func (m *KeysetGenerateResponse) GetResult() isKeysetGenerateResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetGenerateResponse) GetKeyset() []byte {
	if x, ok := x.GetResult().(*KeysetGenerateResponse_Keyset); ok {
		return x.Keyset
	}
	return nil
}

func (x *KeysetGenerateResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetGenerateResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetGenerateResponse_Result interface {
	isKeysetGenerateResponse_Result()
}

type KeysetGenerateResponse_Keyset struct {
	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type KeysetGenerateResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetGenerateResponse_Keyset) isKeysetGenerateResponse_Result() {}

func (*KeysetGenerateResponse_Err) isKeysetGenerateResponse_Result() {}

type KeysetPublicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKeyset []byte `protobuf:"bytes,1,opt,name=private_keyset,json=privateKeyset,proto3" json:"private_keyset,omitempty"` // serialized google.crypto.tink.Keyset.
}

func (x *KeysetPublicRequest) Reset() {
	*x = KeysetPublicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetPublicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetPublicRequest) ProtoMessage() {}

func (x *KeysetPublicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetPublicRequest.ProtoReflect.Descriptor instead.
func (*KeysetPublicRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{6}
}

func (x *KeysetPublicRequest) GetPrivateKeyset() []byte {
	if x != nil {
		return x.PrivateKeyset
	}
	return nil
}

type KeysetPublicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetPublicResponse_PublicKeyset
	//	*KeysetPublicResponse_Err
	Result isKeysetPublicResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetPublicResponse) Reset() {
	*x = KeysetPublicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetPublicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetPublicResponse) ProtoMessage() {}

func (x *KeysetPublicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetPublicResponse.ProtoReflect.Descriptor instead.
func (*KeysetPublicResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{7}
}

func (m *KeysetPublicResponse) GetResult() isKeysetPublicResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetPublicResponse) GetPublicKeyset() []byte {
	if x, ok := x.GetResult().(*KeysetPublicResponse_PublicKeyset); ok {
		return x.PublicKeyset
	}
	return nil
}

func (x *KeysetPublicResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetPublicResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetPublicResponse_Result interface {
	isKeysetPublicResponse_Result()
}

type KeysetPublicResponse_PublicKeyset struct {
	PublicKeyset []byte `protobuf:"bytes,1,opt,name=public_keyset,json=publicKeyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type KeysetPublicResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetPublicResponse_PublicKeyset) isKeysetPublicResponse_Result() {}

func (*KeysetPublicResponse_Err) isKeysetPublicResponse_Result() {}

type KeysetToJsonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3" json:"keyset,omitempty"` // serialized google.crypto.tink.Keyset.
}

func (x *KeysetToJsonRequest) Reset() {
	*x = KeysetToJsonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetToJsonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetToJsonRequest) ProtoMessage() {}

func (x *KeysetToJsonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetToJsonRequest.ProtoReflect.Descriptor instead.
func (*KeysetToJsonRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{8}
}

func (x *KeysetToJsonRequest) GetKeyset() []byte {
	if x != nil {
		return x.Keyset
	}
	return nil
}

type KeysetToJsonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetToJsonResponse_JsonKeyset
	//	*KeysetToJsonResponse_Err
	Result isKeysetToJsonResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetToJsonResponse) Reset() {
	*x = KeysetToJsonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetToJsonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetToJsonResponse) ProtoMessage() {}

func (x *KeysetToJsonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetToJsonResponse.ProtoReflect.Descriptor instead.
func (*KeysetToJsonResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{9}
}

func (m *KeysetToJsonResponse) GetResult() isKeysetToJsonResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetToJsonResponse) GetJsonKeyset() string {
	if x, ok := x.GetResult().(*KeysetToJsonResponse_JsonKeyset); ok {
		return x.JsonKeyset
	}
	return ""
}

func (x *KeysetToJsonResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetToJsonResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetToJsonResponse_Result interface {
	isKeysetToJsonResponse_Result()
}

type KeysetToJsonResponse_JsonKeyset struct {
	JsonKeyset string `protobuf:"bytes,1,opt,name=json_keyset,json=jsonKeyset,proto3,oneof"`
}

type KeysetToJsonResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetToJsonResponse_JsonKeyset) isKeysetToJsonResponse_Result() {}

func (*KeysetToJsonResponse_Err) isKeysetToJsonResponse_Result() {}

type KeysetFromJsonRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonKeyset string `protobuf:"bytes,1,opt,name=json_keyset,json=jsonKeyset,proto3" json:"json_keyset,omitempty"`
}

func (x *KeysetFromJsonRequest) Reset() {
	*x = KeysetFromJsonRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetFromJsonRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetFromJsonRequest) ProtoMessage() {}

func (x *KeysetFromJsonRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetFromJsonRequest.ProtoReflect.Descriptor instead.
func (*KeysetFromJsonRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{10}
}

func (x *KeysetFromJsonRequest) GetJsonKeyset() string {
	if x != nil {
		return x.JsonKeyset
	}
	return ""
}

type KeysetFromJsonResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetFromJsonResponse_Keyset
	//	*KeysetFromJsonResponse_Err
	Result isKeysetFromJsonResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetFromJsonResponse) Reset() {
	*x = KeysetFromJsonResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetFromJsonResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetFromJsonResponse) ProtoMessage() {}

func (x *KeysetFromJsonResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetFromJsonResponse.ProtoReflect.Descriptor instead.
func (*KeysetFromJsonResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{11}
}

func (m *KeysetFromJsonResponse) GetResult() isKeysetFromJsonResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetFromJsonResponse) GetKeyset() []byte {
	if x, ok := x.GetResult().(*KeysetFromJsonResponse_Keyset); ok {
		return x.Keyset
	}
	return nil
}

func (x *KeysetFromJsonResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetFromJsonResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetFromJsonResponse_Result interface {
	isKeysetFromJsonResponse_Result()
}

type KeysetFromJsonResponse_Keyset struct {
	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type KeysetFromJsonResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetFromJsonResponse_Keyset) isKeysetFromJsonResponse_Result() {}

func (*KeysetFromJsonResponse_Err) isKeysetFromJsonResponse_Result() {}

// Copy of google.protobuf.BytesValue
type BytesValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes value.
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BytesValue) Reset() {
	*x = BytesValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesValue) ProtoMessage() {}

func (x *BytesValue) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesValue.ProtoReflect.Descriptor instead.
func (*BytesValue) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{12}
}

func (x *BytesValue) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type KeysetReadEncryptedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptedKeyset  []byte           `protobuf:"bytes,1,opt,name=encrypted_keyset,json=encryptedKeyset,proto3" json:"encrypted_keyset,omitempty"`
	MasterKeyset     []byte           `protobuf:"bytes,2,opt,name=master_keyset,json=masterKeyset,proto3" json:"master_keyset,omitempty"` // serialized google.crypto.tink.Keyset.
	AssociatedData   *BytesValue      `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
	KeysetReaderType KeysetReaderType `protobuf:"varint,4,opt,name=keyset_reader_type,json=keysetReaderType,proto3,enum=tink_testing_api.KeysetReaderType" json:"keyset_reader_type,omitempty"`
}

func (x *KeysetReadEncryptedRequest) Reset() {
	*x = KeysetReadEncryptedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetReadEncryptedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetReadEncryptedRequest) ProtoMessage() {}

func (x *KeysetReadEncryptedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetReadEncryptedRequest.ProtoReflect.Descriptor instead.
func (*KeysetReadEncryptedRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{13}
}

func (x *KeysetReadEncryptedRequest) GetEncryptedKeyset() []byte {
	if x != nil {
		return x.EncryptedKeyset
	}
	return nil
}

func (x *KeysetReadEncryptedRequest) GetMasterKeyset() []byte {
	if x != nil {
		return x.MasterKeyset
	}
	return nil
}

func (x *KeysetReadEncryptedRequest) GetAssociatedData() *BytesValue {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

func (x *KeysetReadEncryptedRequest) GetKeysetReaderType() KeysetReaderType {
	if x != nil {
		return x.KeysetReaderType
	}
	return KeysetReaderType_KEYSET_READER_UNKNOWN
}

type KeysetReadEncryptedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetReadEncryptedResponse_Keyset
	//	*KeysetReadEncryptedResponse_Err
	Result isKeysetReadEncryptedResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetReadEncryptedResponse) Reset() {
	*x = KeysetReadEncryptedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetReadEncryptedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetReadEncryptedResponse) ProtoMessage() {}

func (x *KeysetReadEncryptedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetReadEncryptedResponse.ProtoReflect.Descriptor instead.
func (*KeysetReadEncryptedResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{14}
}

func (m *KeysetReadEncryptedResponse) GetResult() isKeysetReadEncryptedResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetReadEncryptedResponse) GetKeyset() []byte {
	if x, ok := x.GetResult().(*KeysetReadEncryptedResponse_Keyset); ok {
		return x.Keyset
	}
	return nil
}

func (x *KeysetReadEncryptedResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetReadEncryptedResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetReadEncryptedResponse_Result interface {
	isKeysetReadEncryptedResponse_Result()
}

type KeysetReadEncryptedResponse_Keyset struct {
	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type KeysetReadEncryptedResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetReadEncryptedResponse_Keyset) isKeysetReadEncryptedResponse_Result() {}

func (*KeysetReadEncryptedResponse_Err) isKeysetReadEncryptedResponse_Result() {}

type KeysetWriteEncryptedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyset           []byte           `protobuf:"bytes,1,opt,name=keyset,proto3" json:"keyset,omitempty"`                                 // serialized google.crypto.tink.Keyset.
	MasterKeyset     []byte           `protobuf:"bytes,2,opt,name=master_keyset,json=masterKeyset,proto3" json:"master_keyset,omitempty"` // serialized google.crypto.tink.Keyset.
	AssociatedData   *BytesValue      `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
	KeysetWriterType KeysetWriterType `protobuf:"varint,4,opt,name=keyset_writer_type,json=keysetWriterType,proto3,enum=tink_testing_api.KeysetWriterType" json:"keyset_writer_type,omitempty"`
}

func (x *KeysetWriteEncryptedRequest) Reset() {
	*x = KeysetWriteEncryptedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetWriteEncryptedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetWriteEncryptedRequest) ProtoMessage() {}

func (x *KeysetWriteEncryptedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetWriteEncryptedRequest.ProtoReflect.Descriptor instead.
func (*KeysetWriteEncryptedRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{15}
}

func (x *KeysetWriteEncryptedRequest) GetKeyset() []byte {
	if x != nil {
		return x.Keyset
	}
	return nil
}

func (x *KeysetWriteEncryptedRequest) GetMasterKeyset() []byte {
	if x != nil {
		return x.MasterKeyset
	}
	return nil
}

func (x *KeysetWriteEncryptedRequest) GetAssociatedData() *BytesValue {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

func (x *KeysetWriteEncryptedRequest) GetKeysetWriterType() KeysetWriterType {
	if x != nil {
		return x.KeysetWriterType
	}
	return KeysetWriterType_KEYSET_WRITER_UNKNOWN
}

type KeysetWriteEncryptedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*KeysetWriteEncryptedResponse_EncryptedKeyset
	//	*KeysetWriteEncryptedResponse_Err
	Result isKeysetWriteEncryptedResponse_Result `protobuf_oneof:"result"`
}

func (x *KeysetWriteEncryptedResponse) Reset() {
	*x = KeysetWriteEncryptedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeysetWriteEncryptedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeysetWriteEncryptedResponse) ProtoMessage() {}

func (x *KeysetWriteEncryptedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeysetWriteEncryptedResponse.ProtoReflect.Descriptor instead.
func (*KeysetWriteEncryptedResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{16}
}

func (m *KeysetWriteEncryptedResponse) GetResult() isKeysetWriteEncryptedResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *KeysetWriteEncryptedResponse) GetEncryptedKeyset() []byte {
	if x, ok := x.GetResult().(*KeysetWriteEncryptedResponse_EncryptedKeyset); ok {
		return x.EncryptedKeyset
	}
	return nil
}

func (x *KeysetWriteEncryptedResponse) GetErr() string {
	if x, ok := x.GetResult().(*KeysetWriteEncryptedResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isKeysetWriteEncryptedResponse_Result interface {
	isKeysetWriteEncryptedResponse_Result()
}

type KeysetWriteEncryptedResponse_EncryptedKeyset struct {
	EncryptedKeyset []byte `protobuf:"bytes,1,opt,name=encrypted_keyset,json=encryptedKeyset,proto3,oneof"`
}

type KeysetWriteEncryptedResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*KeysetWriteEncryptedResponse_EncryptedKeyset) isKeysetWriteEncryptedResponse_Result() {}

func (*KeysetWriteEncryptedResponse_Err) isKeysetWriteEncryptedResponse_Result() {}

type AnnotatedKeyset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SerializedKeyset []byte            `protobuf:"bytes,1,opt,name=serialized_keyset,json=serializedKeyset,proto3" json:"serialized_keyset,omitempty"` // serialized google.crypto.tink.Keyset.
	Annotations      map[string]string `protobuf:"bytes,2,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AnnotatedKeyset) Reset() {
	*x = AnnotatedKeyset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnnotatedKeyset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnotatedKeyset) ProtoMessage() {}

func (x *AnnotatedKeyset) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnotatedKeyset.ProtoReflect.Descriptor instead.
func (*AnnotatedKeyset) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{17}
}

func (x *AnnotatedKeyset) GetSerializedKeyset() []byte {
	if x != nil {
		return x.SerializedKeyset
	}
	return nil
}

func (x *AnnotatedKeyset) GetAnnotations() map[string]string {
	if x != nil {
		return x.Annotations
	}
	return nil
}

type CreationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
}

func (x *CreationRequest) Reset() {
	*x = CreationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationRequest) ProtoMessage() {}

func (x *CreationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationRequest.ProtoReflect.Descriptor instead.
func (*CreationRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{18}
}

func (x *CreationRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

type CreationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Empty means no error
	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *CreationResponse) Reset() {
	*x = CreationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreationResponse) ProtoMessage() {}

func (x *CreationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreationResponse.ProtoReflect.Descriptor instead.
func (*CreationResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{19}
}

func (x *CreationResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type AeadEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Plaintext       []byte           `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *AeadEncryptRequest) Reset() {
	*x = AeadEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AeadEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AeadEncryptRequest) ProtoMessage() {}

func (x *AeadEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AeadEncryptRequest.ProtoReflect.Descriptor instead.
func (*AeadEncryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{20}
}

func (x *AeadEncryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *AeadEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *AeadEncryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type AeadEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*AeadEncryptResponse_Ciphertext
	//	*AeadEncryptResponse_Err
	Result isAeadEncryptResponse_Result `protobuf_oneof:"result"`
}

func (x *AeadEncryptResponse) Reset() {
	*x = AeadEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AeadEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AeadEncryptResponse) ProtoMessage() {}

func (x *AeadEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AeadEncryptResponse.ProtoReflect.Descriptor instead.
func (*AeadEncryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{21}
}

func (m *AeadEncryptResponse) GetResult() isAeadEncryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *AeadEncryptResponse) GetCiphertext() []byte {
	if x, ok := x.GetResult().(*AeadEncryptResponse_Ciphertext); ok {
		return x.Ciphertext
	}
	return nil
}

func (x *AeadEncryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*AeadEncryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isAeadEncryptResponse_Result interface {
	isAeadEncryptResponse_Result()
}

type AeadEncryptResponse_Ciphertext struct {
	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3,oneof"`
}

type AeadEncryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*AeadEncryptResponse_Ciphertext) isAeadEncryptResponse_Result() {}

func (*AeadEncryptResponse_Err) isAeadEncryptResponse_Result() {}

type AeadDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Ciphertext      []byte           `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *AeadDecryptRequest) Reset() {
	*x = AeadDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AeadDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AeadDecryptRequest) ProtoMessage() {}

func (x *AeadDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AeadDecryptRequest.ProtoReflect.Descriptor instead.
func (*AeadDecryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{22}
}

func (x *AeadDecryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *AeadDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *AeadDecryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type AeadDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*AeadDecryptResponse_Plaintext
	//	*AeadDecryptResponse_Err
	Result isAeadDecryptResponse_Result `protobuf_oneof:"result"`
}

func (x *AeadDecryptResponse) Reset() {
	*x = AeadDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AeadDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AeadDecryptResponse) ProtoMessage() {}

func (x *AeadDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AeadDecryptResponse.ProtoReflect.Descriptor instead.
func (*AeadDecryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{23}
}

func (m *AeadDecryptResponse) GetResult() isAeadDecryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *AeadDecryptResponse) GetPlaintext() []byte {
	if x, ok := x.GetResult().(*AeadDecryptResponse_Plaintext); ok {
		return x.Plaintext
	}
	return nil
}

func (x *AeadDecryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*AeadDecryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isAeadDecryptResponse_Result interface {
	isAeadDecryptResponse_Result()
}

type AeadDecryptResponse_Plaintext struct {
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type AeadDecryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*AeadDecryptResponse_Plaintext) isAeadDecryptResponse_Result() {}

func (*AeadDecryptResponse_Err) isAeadDecryptResponse_Result() {}

type DeterministicAeadEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Plaintext       []byte           `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *DeterministicAeadEncryptRequest) Reset() {
	*x = DeterministicAeadEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeterministicAeadEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeterministicAeadEncryptRequest) ProtoMessage() {}

func (x *DeterministicAeadEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeterministicAeadEncryptRequest.ProtoReflect.Descriptor instead.
func (*DeterministicAeadEncryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{24}
}

func (x *DeterministicAeadEncryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *DeterministicAeadEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *DeterministicAeadEncryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type DeterministicAeadEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*DeterministicAeadEncryptResponse_Ciphertext
	//	*DeterministicAeadEncryptResponse_Err
	Result isDeterministicAeadEncryptResponse_Result `protobuf_oneof:"result"`
}

func (x *DeterministicAeadEncryptResponse) Reset() {
	*x = DeterministicAeadEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeterministicAeadEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeterministicAeadEncryptResponse) ProtoMessage() {}

func (x *DeterministicAeadEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeterministicAeadEncryptResponse.ProtoReflect.Descriptor instead.
func (*DeterministicAeadEncryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{25}
}

func (m *DeterministicAeadEncryptResponse) GetResult() isDeterministicAeadEncryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DeterministicAeadEncryptResponse) GetCiphertext() []byte {
	if x, ok := x.GetResult().(*DeterministicAeadEncryptResponse_Ciphertext); ok {
		return x.Ciphertext
	}
	return nil
}

func (x *DeterministicAeadEncryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*DeterministicAeadEncryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isDeterministicAeadEncryptResponse_Result interface {
	isDeterministicAeadEncryptResponse_Result()
}

type DeterministicAeadEncryptResponse_Ciphertext struct {
	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3,oneof"`
}

type DeterministicAeadEncryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*DeterministicAeadEncryptResponse_Ciphertext) isDeterministicAeadEncryptResponse_Result() {}

func (*DeterministicAeadEncryptResponse_Err) isDeterministicAeadEncryptResponse_Result() {}

type DeterministicAeadDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Ciphertext      []byte           `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *DeterministicAeadDecryptRequest) Reset() {
	*x = DeterministicAeadDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeterministicAeadDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeterministicAeadDecryptRequest) ProtoMessage() {}

func (x *DeterministicAeadDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeterministicAeadDecryptRequest.ProtoReflect.Descriptor instead.
func (*DeterministicAeadDecryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{26}
}

func (x *DeterministicAeadDecryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *DeterministicAeadDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *DeterministicAeadDecryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type DeterministicAeadDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*DeterministicAeadDecryptResponse_Plaintext
	//	*DeterministicAeadDecryptResponse_Err
	Result isDeterministicAeadDecryptResponse_Result `protobuf_oneof:"result"`
}

func (x *DeterministicAeadDecryptResponse) Reset() {
	*x = DeterministicAeadDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeterministicAeadDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeterministicAeadDecryptResponse) ProtoMessage() {}

func (x *DeterministicAeadDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeterministicAeadDecryptResponse.ProtoReflect.Descriptor instead.
func (*DeterministicAeadDecryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{27}
}

func (m *DeterministicAeadDecryptResponse) GetResult() isDeterministicAeadDecryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DeterministicAeadDecryptResponse) GetPlaintext() []byte {
	if x, ok := x.GetResult().(*DeterministicAeadDecryptResponse_Plaintext); ok {
		return x.Plaintext
	}
	return nil
}

func (x *DeterministicAeadDecryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*DeterministicAeadDecryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isDeterministicAeadDecryptResponse_Result interface {
	isDeterministicAeadDecryptResponse_Result()
}

type DeterministicAeadDecryptResponse_Plaintext struct {
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type DeterministicAeadDecryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*DeterministicAeadDecryptResponse_Plaintext) isDeterministicAeadDecryptResponse_Result() {}

func (*DeterministicAeadDecryptResponse_Err) isDeterministicAeadDecryptResponse_Result() {}

type StreamingAeadEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Plaintext       []byte           `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *StreamingAeadEncryptRequest) Reset() {
	*x = StreamingAeadEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAeadEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAeadEncryptRequest) ProtoMessage() {}

func (x *StreamingAeadEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAeadEncryptRequest.ProtoReflect.Descriptor instead.
func (*StreamingAeadEncryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{28}
}

func (x *StreamingAeadEncryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *StreamingAeadEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *StreamingAeadEncryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type StreamingAeadEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*StreamingAeadEncryptResponse_Ciphertext
	//	*StreamingAeadEncryptResponse_Err
	Result isStreamingAeadEncryptResponse_Result `protobuf_oneof:"result"`
}

func (x *StreamingAeadEncryptResponse) Reset() {
	*x = StreamingAeadEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAeadEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAeadEncryptResponse) ProtoMessage() {}

func (x *StreamingAeadEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAeadEncryptResponse.ProtoReflect.Descriptor instead.
func (*StreamingAeadEncryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{29}
}

func (m *StreamingAeadEncryptResponse) GetResult() isStreamingAeadEncryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *StreamingAeadEncryptResponse) GetCiphertext() []byte {
	if x, ok := x.GetResult().(*StreamingAeadEncryptResponse_Ciphertext); ok {
		return x.Ciphertext
	}
	return nil
}

func (x *StreamingAeadEncryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*StreamingAeadEncryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isStreamingAeadEncryptResponse_Result interface {
	isStreamingAeadEncryptResponse_Result()
}

type StreamingAeadEncryptResponse_Ciphertext struct {
	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3,oneof"`
}

type StreamingAeadEncryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*StreamingAeadEncryptResponse_Ciphertext) isStreamingAeadEncryptResponse_Result() {}

func (*StreamingAeadEncryptResponse_Err) isStreamingAeadEncryptResponse_Result() {}

type StreamingAeadDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Ciphertext      []byte           `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	AssociatedData  []byte           `protobuf:"bytes,3,opt,name=associated_data,json=associatedData,proto3" json:"associated_data,omitempty"`
}

func (x *StreamingAeadDecryptRequest) Reset() {
	*x = StreamingAeadDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAeadDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAeadDecryptRequest) ProtoMessage() {}

func (x *StreamingAeadDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAeadDecryptRequest.ProtoReflect.Descriptor instead.
func (*StreamingAeadDecryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{30}
}

func (x *StreamingAeadDecryptRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *StreamingAeadDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *StreamingAeadDecryptRequest) GetAssociatedData() []byte {
	if x != nil {
		return x.AssociatedData
	}
	return nil
}

type StreamingAeadDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*StreamingAeadDecryptResponse_Plaintext
	//	*StreamingAeadDecryptResponse_Err
	Result isStreamingAeadDecryptResponse_Result `protobuf_oneof:"result"`
}

func (x *StreamingAeadDecryptResponse) Reset() {
	*x = StreamingAeadDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamingAeadDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingAeadDecryptResponse) ProtoMessage() {}

func (x *StreamingAeadDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingAeadDecryptResponse.ProtoReflect.Descriptor instead.
func (*StreamingAeadDecryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{31}
}

func (m *StreamingAeadDecryptResponse) GetResult() isStreamingAeadDecryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *StreamingAeadDecryptResponse) GetPlaintext() []byte {
	if x, ok := x.GetResult().(*StreamingAeadDecryptResponse_Plaintext); ok {
		return x.Plaintext
	}
	return nil
}

func (x *StreamingAeadDecryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*StreamingAeadDecryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isStreamingAeadDecryptResponse_Result interface {
	isStreamingAeadDecryptResponse_Result()
}

type StreamingAeadDecryptResponse_Plaintext struct {
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type StreamingAeadDecryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*StreamingAeadDecryptResponse_Plaintext) isStreamingAeadDecryptResponse_Result() {}

func (*StreamingAeadDecryptResponse_Err) isStreamingAeadDecryptResponse_Result() {}

type ComputeMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Data            []byte           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ComputeMacRequest) Reset() {
	*x = ComputeMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMacRequest) ProtoMessage() {}

func (x *ComputeMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMacRequest.ProtoReflect.Descriptor instead.
func (*ComputeMacRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{32}
}

func (x *ComputeMacRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *ComputeMacRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ComputeMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*ComputeMacResponse_MacValue
	//	*ComputeMacResponse_Err
	Result isComputeMacResponse_Result `protobuf_oneof:"result"`
}

func (x *ComputeMacResponse) Reset() {
	*x = ComputeMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeMacResponse) ProtoMessage() {}

func (x *ComputeMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeMacResponse.ProtoReflect.Descriptor instead.
func (*ComputeMacResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{33}
}

func (m *ComputeMacResponse) GetResult() isComputeMacResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *ComputeMacResponse) GetMacValue() []byte {
	if x, ok := x.GetResult().(*ComputeMacResponse_MacValue); ok {
		return x.MacValue
	}
	return nil
}

func (x *ComputeMacResponse) GetErr() string {
	if x, ok := x.GetResult().(*ComputeMacResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isComputeMacResponse_Result interface {
	isComputeMacResponse_Result()
}

type ComputeMacResponse_MacValue struct {
	MacValue []byte `protobuf:"bytes,1,opt,name=mac_value,json=macValue,proto3,oneof"`
}

type ComputeMacResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*ComputeMacResponse_MacValue) isComputeMacResponse_Result() {}

func (*ComputeMacResponse_Err) isComputeMacResponse_Result() {}

type VerifyMacRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	MacValue        []byte           `protobuf:"bytes,2,opt,name=mac_value,json=macValue,proto3" json:"mac_value,omitempty"`
	Data            []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *VerifyMacRequest) Reset() {
	*x = VerifyMacRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMacRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMacRequest) ProtoMessage() {}

func (x *VerifyMacRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMacRequest.ProtoReflect.Descriptor instead.
func (*VerifyMacRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{34}
}

func (x *VerifyMacRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *VerifyMacRequest) GetMacValue() []byte {
	if x != nil {
		return x.MacValue
	}
	return nil
}

func (x *VerifyMacRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type VerifyMacResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *VerifyMacResponse) Reset() {
	*x = VerifyMacResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyMacResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyMacResponse) ProtoMessage() {}

func (x *VerifyMacResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyMacResponse.ProtoReflect.Descriptor instead.
func (*VerifyMacResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{35}
}

func (x *VerifyMacResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type HybridEncryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicAnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=public_annotated_keyset,json=publicAnnotatedKeyset,proto3" json:"public_annotated_keyset,omitempty"`
	Plaintext             []byte           `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	ContextInfo           []byte           `protobuf:"bytes,3,opt,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty"`
}

func (x *HybridEncryptRequest) Reset() {
	*x = HybridEncryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEncryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEncryptRequest) ProtoMessage() {}

func (x *HybridEncryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEncryptRequest.ProtoReflect.Descriptor instead.
func (*HybridEncryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{36}
}

func (x *HybridEncryptRequest) GetPublicAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.PublicAnnotatedKeyset
	}
	return nil
}

func (x *HybridEncryptRequest) GetPlaintext() []byte {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *HybridEncryptRequest) GetContextInfo() []byte {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type HybridEncryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*HybridEncryptResponse_Ciphertext
	//	*HybridEncryptResponse_Err
	Result isHybridEncryptResponse_Result `protobuf_oneof:"result"`
}

func (x *HybridEncryptResponse) Reset() {
	*x = HybridEncryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridEncryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridEncryptResponse) ProtoMessage() {}

func (x *HybridEncryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridEncryptResponse.ProtoReflect.Descriptor instead.
func (*HybridEncryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{37}
}

func (m *HybridEncryptResponse) GetResult() isHybridEncryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *HybridEncryptResponse) GetCiphertext() []byte {
	if x, ok := x.GetResult().(*HybridEncryptResponse_Ciphertext); ok {
		return x.Ciphertext
	}
	return nil
}

func (x *HybridEncryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*HybridEncryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isHybridEncryptResponse_Result interface {
	isHybridEncryptResponse_Result()
}

type HybridEncryptResponse_Ciphertext struct {
	Ciphertext []byte `protobuf:"bytes,1,opt,name=ciphertext,proto3,oneof"`
}

type HybridEncryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*HybridEncryptResponse_Ciphertext) isHybridEncryptResponse_Result() {}

func (*HybridEncryptResponse_Err) isHybridEncryptResponse_Result() {}

type HybridDecryptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateAnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=private_annotated_keyset,json=privateAnnotatedKeyset,proto3" json:"private_annotated_keyset,omitempty"`
	Ciphertext             []byte           `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	ContextInfo            []byte           `protobuf:"bytes,3,opt,name=context_info,json=contextInfo,proto3" json:"context_info,omitempty"`
}

func (x *HybridDecryptRequest) Reset() {
	*x = HybridDecryptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridDecryptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridDecryptRequest) ProtoMessage() {}

func (x *HybridDecryptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridDecryptRequest.ProtoReflect.Descriptor instead.
func (*HybridDecryptRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{38}
}

func (x *HybridDecryptRequest) GetPrivateAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.PrivateAnnotatedKeyset
	}
	return nil
}

func (x *HybridDecryptRequest) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *HybridDecryptRequest) GetContextInfo() []byte {
	if x != nil {
		return x.ContextInfo
	}
	return nil
}

type HybridDecryptResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*HybridDecryptResponse_Plaintext
	//	*HybridDecryptResponse_Err
	Result isHybridDecryptResponse_Result `protobuf_oneof:"result"`
}

func (x *HybridDecryptResponse) Reset() {
	*x = HybridDecryptResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HybridDecryptResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HybridDecryptResponse) ProtoMessage() {}

func (x *HybridDecryptResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HybridDecryptResponse.ProtoReflect.Descriptor instead.
func (*HybridDecryptResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{39}
}

func (m *HybridDecryptResponse) GetResult() isHybridDecryptResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *HybridDecryptResponse) GetPlaintext() []byte {
	if x, ok := x.GetResult().(*HybridDecryptResponse_Plaintext); ok {
		return x.Plaintext
	}
	return nil
}

func (x *HybridDecryptResponse) GetErr() string {
	if x, ok := x.GetResult().(*HybridDecryptResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isHybridDecryptResponse_Result interface {
	isHybridDecryptResponse_Result()
}

type HybridDecryptResponse_Plaintext struct {
	Plaintext []byte `protobuf:"bytes,1,opt,name=plaintext,proto3,oneof"`
}

type HybridDecryptResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*HybridDecryptResponse_Plaintext) isHybridDecryptResponse_Result() {}

func (*HybridDecryptResponse_Err) isHybridDecryptResponse_Result() {}

type SignatureSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateAnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=private_annotated_keyset,json=privateAnnotatedKeyset,proto3" json:"private_annotated_keyset,omitempty"`
	Data                   []byte           `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignatureSignRequest) Reset() {
	*x = SignatureSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureSignRequest) ProtoMessage() {}

func (x *SignatureSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureSignRequest.ProtoReflect.Descriptor instead.
func (*SignatureSignRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{40}
}

func (x *SignatureSignRequest) GetPrivateAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.PrivateAnnotatedKeyset
	}
	return nil
}

func (x *SignatureSignRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SignatureSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*SignatureSignResponse_Signature
	//	*SignatureSignResponse_Err
	Result isSignatureSignResponse_Result `protobuf_oneof:"result"`
}

func (x *SignatureSignResponse) Reset() {
	*x = SignatureSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureSignResponse) ProtoMessage() {}

func (x *SignatureSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureSignResponse.ProtoReflect.Descriptor instead.
func (*SignatureSignResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{41}
}

func (m *SignatureSignResponse) GetResult() isSignatureSignResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *SignatureSignResponse) GetSignature() []byte {
	if x, ok := x.GetResult().(*SignatureSignResponse_Signature); ok {
		return x.Signature
	}
	return nil
}

func (x *SignatureSignResponse) GetErr() string {
	if x, ok := x.GetResult().(*SignatureSignResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isSignatureSignResponse_Result interface {
	isSignatureSignResponse_Result()
}

type SignatureSignResponse_Signature struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3,oneof"`
}

type SignatureSignResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*SignatureSignResponse_Signature) isSignatureSignResponse_Result() {}

func (*SignatureSignResponse_Err) isSignatureSignResponse_Result() {}

type SignatureVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicAnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=public_annotated_keyset,json=publicAnnotatedKeyset,proto3" json:"public_annotated_keyset,omitempty"`
	Signature             []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	Data                  []byte           `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignatureVerifyRequest) Reset() {
	*x = SignatureVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureVerifyRequest) ProtoMessage() {}

func (x *SignatureVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureVerifyRequest.ProtoReflect.Descriptor instead.
func (*SignatureVerifyRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{42}
}

func (x *SignatureVerifyRequest) GetPublicAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.PublicAnnotatedKeyset
	}
	return nil
}

func (x *SignatureVerifyRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *SignatureVerifyRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SignatureVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Err string `protobuf:"bytes,1,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *SignatureVerifyResponse) Reset() {
	*x = SignatureVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureVerifyResponse) ProtoMessage() {}

func (x *SignatureVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureVerifyResponse.ProtoReflect.Descriptor instead.
func (*SignatureVerifyResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{43}
}

func (x *SignatureVerifyResponse) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

type PrfSetKeyIdsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
}

func (x *PrfSetKeyIdsRequest) Reset() {
	*x = PrfSetKeyIdsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrfSetKeyIdsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrfSetKeyIdsRequest) ProtoMessage() {}

func (x *PrfSetKeyIdsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrfSetKeyIdsRequest.ProtoReflect.Descriptor instead.
func (*PrfSetKeyIdsRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{44}
}

func (x *PrfSetKeyIdsRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

type PrfSetKeyIdsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*PrfSetKeyIdsResponse_Output_
	//	*PrfSetKeyIdsResponse_Err
	Result isPrfSetKeyIdsResponse_Result `protobuf_oneof:"result"`
}

func (x *PrfSetKeyIdsResponse) Reset() {
	*x = PrfSetKeyIdsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrfSetKeyIdsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrfSetKeyIdsResponse) ProtoMessage() {}

func (x *PrfSetKeyIdsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrfSetKeyIdsResponse.ProtoReflect.Descriptor instead.
func (*PrfSetKeyIdsResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{45}
}

func (m *PrfSetKeyIdsResponse) GetResult() isPrfSetKeyIdsResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *PrfSetKeyIdsResponse) GetOutput() *PrfSetKeyIdsResponse_Output {
	if x, ok := x.GetResult().(*PrfSetKeyIdsResponse_Output_); ok {
		return x.Output
	}
	return nil
}

func (x *PrfSetKeyIdsResponse) GetErr() string {
	if x, ok := x.GetResult().(*PrfSetKeyIdsResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isPrfSetKeyIdsResponse_Result interface {
	isPrfSetKeyIdsResponse_Result()
}

type PrfSetKeyIdsResponse_Output_ struct {
	Output *PrfSetKeyIdsResponse_Output `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type PrfSetKeyIdsResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*PrfSetKeyIdsResponse_Output_) isPrfSetKeyIdsResponse_Result() {}

func (*PrfSetKeyIdsResponse_Err) isPrfSetKeyIdsResponse_Result() {}

type PrfSetComputeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	KeyId           uint32           `protobuf:"varint,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	InputData       []byte           `protobuf:"bytes,3,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	OutputLength    int32            `protobuf:"varint,4,opt,name=output_length,json=outputLength,proto3" json:"output_length,omitempty"`
}

func (x *PrfSetComputeRequest) Reset() {
	*x = PrfSetComputeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrfSetComputeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrfSetComputeRequest) ProtoMessage() {}

func (x *PrfSetComputeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrfSetComputeRequest.ProtoReflect.Descriptor instead.
func (*PrfSetComputeRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{46}
}

func (x *PrfSetComputeRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *PrfSetComputeRequest) GetKeyId() uint32 {
	if x != nil {
		return x.KeyId
	}
	return 0
}

func (x *PrfSetComputeRequest) GetInputData() []byte {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *PrfSetComputeRequest) GetOutputLength() int32 {
	if x != nil {
		return x.OutputLength
	}
	return 0
}

type PrfSetComputeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*PrfSetComputeResponse_Output
	//	*PrfSetComputeResponse_Err
	Result isPrfSetComputeResponse_Result `protobuf_oneof:"result"`
}

func (x *PrfSetComputeResponse) Reset() {
	*x = PrfSetComputeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrfSetComputeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrfSetComputeResponse) ProtoMessage() {}

func (x *PrfSetComputeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrfSetComputeResponse.ProtoReflect.Descriptor instead.
func (*PrfSetComputeResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{47}
}

func (m *PrfSetComputeResponse) GetResult() isPrfSetComputeResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *PrfSetComputeResponse) GetOutput() []byte {
	if x, ok := x.GetResult().(*PrfSetComputeResponse_Output); ok {
		return x.Output
	}
	return nil
}

func (x *PrfSetComputeResponse) GetErr() string {
	if x, ok := x.GetResult().(*PrfSetComputeResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isPrfSetComputeResponse_Result interface {
	isPrfSetComputeResponse_Result()
}

type PrfSetComputeResponse_Output struct {
	Output []byte `protobuf:"bytes,1,opt,name=output,proto3,oneof"`
}

type PrfSetComputeResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*PrfSetComputeResponse_Output) isPrfSetComputeResponse_Result() {}

func (*PrfSetComputeResponse_Err) isPrfSetComputeResponse_Result() {}

type JwtClaimValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Kind:
	//
	//	*JwtClaimValue_NullValue
	//	*JwtClaimValue_NumberValue
	//	*JwtClaimValue_StringValue
	//	*JwtClaimValue_BoolValue
	//	*JwtClaimValue_JsonObjectValue
	//	*JwtClaimValue_JsonArrayValue
	Kind isJwtClaimValue_Kind `protobuf_oneof:"kind"`
}

func (x *JwtClaimValue) Reset() {
	*x = JwtClaimValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtClaimValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtClaimValue) ProtoMessage() {}

func (x *JwtClaimValue) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtClaimValue.ProtoReflect.Descriptor instead.
func (*JwtClaimValue) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{48}
}

func (m *JwtClaimValue) GetKind() isJwtClaimValue_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (x *JwtClaimValue) GetNullValue() NullValue {
	if x, ok := x.GetKind().(*JwtClaimValue_NullValue); ok {
		return x.NullValue
	}
	return NullValue_NULL_VALUE
}

func (x *JwtClaimValue) GetNumberValue() float64 {
	if x, ok := x.GetKind().(*JwtClaimValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *JwtClaimValue) GetStringValue() string {
	if x, ok := x.GetKind().(*JwtClaimValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *JwtClaimValue) GetBoolValue() bool {
	if x, ok := x.GetKind().(*JwtClaimValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *JwtClaimValue) GetJsonObjectValue() string {
	if x, ok := x.GetKind().(*JwtClaimValue_JsonObjectValue); ok {
		return x.JsonObjectValue
	}
	return ""
}

func (x *JwtClaimValue) GetJsonArrayValue() string {
	if x, ok := x.GetKind().(*JwtClaimValue_JsonArrayValue); ok {
		return x.JsonArrayValue
	}
	return ""
}

type isJwtClaimValue_Kind interface {
	isJwtClaimValue_Kind()
}

type JwtClaimValue_NullValue struct {
	NullValue NullValue `protobuf:"varint,2,opt,name=null_value,json=nullValue,proto3,enum=tink_testing_api.NullValue,oneof"`
}

type JwtClaimValue_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=number_value,json=numberValue,proto3,oneof"`
}

type JwtClaimValue_StringValue struct {
	StringValue string `protobuf:"bytes,4,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type JwtClaimValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,5,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type JwtClaimValue_JsonObjectValue struct {
	JsonObjectValue string `protobuf:"bytes,6,opt,name=json_object_value,json=jsonObjectValue,proto3,oneof"`
}

type JwtClaimValue_JsonArrayValue struct {
	JsonArrayValue string `protobuf:"bytes,7,opt,name=json_array_value,json=jsonArrayValue,proto3,oneof"`
}

func (*JwtClaimValue_NullValue) isJwtClaimValue_Kind() {}

func (*JwtClaimValue_NumberValue) isJwtClaimValue_Kind() {}

func (*JwtClaimValue_StringValue) isJwtClaimValue_Kind() {}

func (*JwtClaimValue_BoolValue) isJwtClaimValue_Kind() {}

func (*JwtClaimValue_JsonObjectValue) isJwtClaimValue_Kind() {}

func (*JwtClaimValue_JsonArrayValue) isJwtClaimValue_Kind() {}

type JwtToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Issuer       *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	Subject      *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Audiences    []string                  `protobuf:"bytes,3,rep,name=audiences,proto3" json:"audiences,omitempty"`
	JwtId        *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=jwt_id,json=jwtId,proto3" json:"jwt_id,omitempty"`
	Expiration   *timestamppb.Timestamp    `protobuf:"bytes,5,opt,name=expiration,proto3" json:"expiration,omitempty"`
	NotBefore    *timestamppb.Timestamp    `protobuf:"bytes,6,opt,name=not_before,json=notBefore,proto3" json:"not_before,omitempty"`
	IssuedAt     *timestamppb.Timestamp    `protobuf:"bytes,7,opt,name=issued_at,json=issuedAt,proto3" json:"issued_at,omitempty"`
	CustomClaims map[string]*JwtClaimValue `protobuf:"bytes,8,rep,name=custom_claims,json=customClaims,proto3" json:"custom_claims,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TypeHeader   *wrapperspb.StringValue   `protobuf:"bytes,9,opt,name=type_header,json=typeHeader,proto3" json:"type_header,omitempty"`
}

func (x *JwtToken) Reset() {
	*x = JwtToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtToken) ProtoMessage() {}

func (x *JwtToken) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtToken.ProtoReflect.Descriptor instead.
func (*JwtToken) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{49}
}

func (x *JwtToken) GetIssuer() *wrapperspb.StringValue {
	if x != nil {
		return x.Issuer
	}
	return nil
}

func (x *JwtToken) GetSubject() *wrapperspb.StringValue {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *JwtToken) GetAudiences() []string {
	if x != nil {
		return x.Audiences
	}
	return nil
}

func (x *JwtToken) GetJwtId() *wrapperspb.StringValue {
	if x != nil {
		return x.JwtId
	}
	return nil
}

func (x *JwtToken) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *JwtToken) GetNotBefore() *timestamppb.Timestamp {
	if x != nil {
		return x.NotBefore
	}
	return nil
}

func (x *JwtToken) GetIssuedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedAt
	}
	return nil
}

func (x *JwtToken) GetCustomClaims() map[string]*JwtClaimValue {
	if x != nil {
		return x.CustomClaims
	}
	return nil
}

func (x *JwtToken) GetTypeHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.TypeHeader
	}
	return nil
}

type JwtValidator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedTypeHeader     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=expected_type_header,json=expectedTypeHeader,proto3" json:"expected_type_header,omitempty"`
	ExpectedIssuer         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=expected_issuer,json=expectedIssuer,proto3" json:"expected_issuer,omitempty"`
	ExpectedAudience       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=expected_audience,json=expectedAudience,proto3" json:"expected_audience,omitempty"`
	IgnoreTypeHeader       bool                    `protobuf:"varint,8,opt,name=ignore_type_header,json=ignoreTypeHeader,proto3" json:"ignore_type_header,omitempty"`
	IgnoreIssuer           bool                    `protobuf:"varint,9,opt,name=ignore_issuer,json=ignoreIssuer,proto3" json:"ignore_issuer,omitempty"`
	IgnoreAudience         bool                    `protobuf:"varint,11,opt,name=ignore_audience,json=ignoreAudience,proto3" json:"ignore_audience,omitempty"`
	AllowMissingExpiration bool                    `protobuf:"varint,12,opt,name=allow_missing_expiration,json=allowMissingExpiration,proto3" json:"allow_missing_expiration,omitempty"`
	ExpectIssuedInThePast  bool                    `protobuf:"varint,13,opt,name=expect_issued_in_the_past,json=expectIssuedInThePast,proto3" json:"expect_issued_in_the_past,omitempty"`
	Now                    *timestamppb.Timestamp  `protobuf:"bytes,5,opt,name=now,proto3" json:"now,omitempty"`
	ClockSkew              *durationpb.Duration    `protobuf:"bytes,6,opt,name=clock_skew,json=clockSkew,proto3" json:"clock_skew,omitempty"`
}

func (x *JwtValidator) Reset() {
	*x = JwtValidator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtValidator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtValidator) ProtoMessage() {}

func (x *JwtValidator) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtValidator.ProtoReflect.Descriptor instead.
func (*JwtValidator) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{50}
}

func (x *JwtValidator) GetExpectedTypeHeader() *wrapperspb.StringValue {
	if x != nil {
		return x.ExpectedTypeHeader
	}
	return nil
}

func (x *JwtValidator) GetExpectedIssuer() *wrapperspb.StringValue {
	if x != nil {
		return x.ExpectedIssuer
	}
	return nil
}

func (x *JwtValidator) GetExpectedAudience() *wrapperspb.StringValue {
	if x != nil {
		return x.ExpectedAudience
	}
	return nil
}

func (x *JwtValidator) GetIgnoreTypeHeader() bool {
	if x != nil {
		return x.IgnoreTypeHeader
	}
	return false
}

func (x *JwtValidator) GetIgnoreIssuer() bool {
	if x != nil {
		return x.IgnoreIssuer
	}
	return false
}

func (x *JwtValidator) GetIgnoreAudience() bool {
	if x != nil {
		return x.IgnoreAudience
	}
	return false
}

func (x *JwtValidator) GetAllowMissingExpiration() bool {
	if x != nil {
		return x.AllowMissingExpiration
	}
	return false
}

func (x *JwtValidator) GetExpectIssuedInThePast() bool {
	if x != nil {
		return x.ExpectIssuedInThePast
	}
	return false
}

func (x *JwtValidator) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *JwtValidator) GetClockSkew() *durationpb.Duration {
	if x != nil {
		return x.ClockSkew
	}
	return nil
}

type JwtSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	RawJwt          *JwtToken        `protobuf:"bytes,2,opt,name=raw_jwt,json=rawJwt,proto3" json:"raw_jwt,omitempty"`
}

func (x *JwtSignRequest) Reset() {
	*x = JwtSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtSignRequest) ProtoMessage() {}

func (x *JwtSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtSignRequest.ProtoReflect.Descriptor instead.
func (*JwtSignRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{51}
}

func (x *JwtSignRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *JwtSignRequest) GetRawJwt() *JwtToken {
	if x != nil {
		return x.RawJwt
	}
	return nil
}

type JwtSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*JwtSignResponse_SignedCompactJwt
	//	*JwtSignResponse_Err
	Result isJwtSignResponse_Result `protobuf_oneof:"result"`
}

func (x *JwtSignResponse) Reset() {
	*x = JwtSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtSignResponse) ProtoMessage() {}

func (x *JwtSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtSignResponse.ProtoReflect.Descriptor instead.
func (*JwtSignResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{52}
}

func (m *JwtSignResponse) GetResult() isJwtSignResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *JwtSignResponse) GetSignedCompactJwt() string {
	if x, ok := x.GetResult().(*JwtSignResponse_SignedCompactJwt); ok {
		return x.SignedCompactJwt
	}
	return ""
}

func (x *JwtSignResponse) GetErr() string {
	if x, ok := x.GetResult().(*JwtSignResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isJwtSignResponse_Result interface {
	isJwtSignResponse_Result()
}

type JwtSignResponse_SignedCompactJwt struct {
	SignedCompactJwt string `protobuf:"bytes,1,opt,name=signed_compact_jwt,json=signedCompactJwt,proto3,oneof"`
}

type JwtSignResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*JwtSignResponse_SignedCompactJwt) isJwtSignResponse_Result() {}

func (*JwtSignResponse_Err) isJwtSignResponse_Result() {}

type JwtVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset  *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	SignedCompactJwt string           `protobuf:"bytes,2,opt,name=signed_compact_jwt,json=signedCompactJwt,proto3" json:"signed_compact_jwt,omitempty"`
	Validator        *JwtValidator    `protobuf:"bytes,3,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (x *JwtVerifyRequest) Reset() {
	*x = JwtVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtVerifyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtVerifyRequest) ProtoMessage() {}

func (x *JwtVerifyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtVerifyRequest.ProtoReflect.Descriptor instead.
func (*JwtVerifyRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{53}
}

func (x *JwtVerifyRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *JwtVerifyRequest) GetSignedCompactJwt() string {
	if x != nil {
		return x.SignedCompactJwt
	}
	return ""
}

func (x *JwtVerifyRequest) GetValidator() *JwtValidator {
	if x != nil {
		return x.Validator
	}
	return nil
}

type JwtVerifyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*JwtVerifyResponse_VerifiedJwt
	//	*JwtVerifyResponse_Err
	Result isJwtVerifyResponse_Result `protobuf_oneof:"result"`
}

func (x *JwtVerifyResponse) Reset() {
	*x = JwtVerifyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtVerifyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtVerifyResponse) ProtoMessage() {}

func (x *JwtVerifyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtVerifyResponse.ProtoReflect.Descriptor instead.
func (*JwtVerifyResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{54}
}

func (m *JwtVerifyResponse) GetResult() isJwtVerifyResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *JwtVerifyResponse) GetVerifiedJwt() *JwtToken {
	if x, ok := x.GetResult().(*JwtVerifyResponse_VerifiedJwt); ok {
		return x.VerifiedJwt
	}
	return nil
}

func (x *JwtVerifyResponse) GetErr() string {
	if x, ok := x.GetResult().(*JwtVerifyResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isJwtVerifyResponse_Result interface {
	isJwtVerifyResponse_Result()
}

type JwtVerifyResponse_VerifiedJwt struct {
	VerifiedJwt *JwtToken `protobuf:"bytes,1,opt,name=verified_jwt,json=verifiedJwt,proto3,oneof"`
}

type JwtVerifyResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*JwtVerifyResponse_VerifiedJwt) isJwtVerifyResponse_Result() {}

func (*JwtVerifyResponse_Err) isJwtVerifyResponse_Result() {}

type JwtToJwkSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3" json:"keyset,omitempty"` // serialized google.crypto.tink.Keyset.
}

func (x *JwtToJwkSetRequest) Reset() {
	*x = JwtToJwkSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtToJwkSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtToJwkSetRequest) ProtoMessage() {}

func (x *JwtToJwkSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtToJwkSetRequest.ProtoReflect.Descriptor instead.
func (*JwtToJwkSetRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{55}
}

func (x *JwtToJwkSetRequest) GetKeyset() []byte {
	if x != nil {
		return x.Keyset
	}
	return nil
}

type JwtToJwkSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*JwtToJwkSetResponse_JwkSet
	//	*JwtToJwkSetResponse_Err
	Result isJwtToJwkSetResponse_Result `protobuf_oneof:"result"`
}

func (x *JwtToJwkSetResponse) Reset() {
	*x = JwtToJwkSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtToJwkSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtToJwkSetResponse) ProtoMessage() {}

func (x *JwtToJwkSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtToJwkSetResponse.ProtoReflect.Descriptor instead.
func (*JwtToJwkSetResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{56}
}

func (m *JwtToJwkSetResponse) GetResult() isJwtToJwkSetResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *JwtToJwkSetResponse) GetJwkSet() string {
	if x, ok := x.GetResult().(*JwtToJwkSetResponse_JwkSet); ok {
		return x.JwkSet
	}
	return ""
}

func (x *JwtToJwkSetResponse) GetErr() string {
	if x, ok := x.GetResult().(*JwtToJwkSetResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isJwtToJwkSetResponse_Result interface {
	isJwtToJwkSetResponse_Result()
}

type JwtToJwkSetResponse_JwkSet struct {
	JwkSet string `protobuf:"bytes,1,opt,name=jwk_set,json=jwkSet,proto3,oneof"`
}

type JwtToJwkSetResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*JwtToJwkSetResponse_JwkSet) isJwtToJwkSetResponse_Result() {}

func (*JwtToJwkSetResponse_Err) isJwtToJwkSetResponse_Result() {}

type JwtFromJwkSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JwkSet string `protobuf:"bytes,1,opt,name=jwk_set,json=jwkSet,proto3" json:"jwk_set,omitempty"`
}

func (x *JwtFromJwkSetRequest) Reset() {
	*x = JwtFromJwkSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtFromJwkSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtFromJwkSetRequest) ProtoMessage() {}

func (x *JwtFromJwkSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtFromJwkSetRequest.ProtoReflect.Descriptor instead.
func (*JwtFromJwkSetRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{57}
}

func (x *JwtFromJwkSetRequest) GetJwkSet() string {
	if x != nil {
		return x.JwkSet
	}
	return ""
}

type JwtFromJwkSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*JwtFromJwkSetResponse_Keyset
	//	*JwtFromJwkSetResponse_Err
	Result isJwtFromJwkSetResponse_Result `protobuf_oneof:"result"`
}

func (x *JwtFromJwkSetResponse) Reset() {
	*x = JwtFromJwkSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JwtFromJwkSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JwtFromJwkSetResponse) ProtoMessage() {}

func (x *JwtFromJwkSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JwtFromJwkSetResponse.ProtoReflect.Descriptor instead.
func (*JwtFromJwkSetResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{58}
}

func (m *JwtFromJwkSetResponse) GetResult() isJwtFromJwkSetResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *JwtFromJwkSetResponse) GetKeyset() []byte {
	if x, ok := x.GetResult().(*JwtFromJwkSetResponse_Keyset); ok {
		return x.Keyset
	}
	return nil
}

func (x *JwtFromJwkSetResponse) GetErr() string {
	if x, ok := x.GetResult().(*JwtFromJwkSetResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isJwtFromJwkSetResponse_Result interface {
	isJwtFromJwkSetResponse_Result()
}

type JwtFromJwkSetResponse_Keyset struct {
	Keyset []byte `protobuf:"bytes,1,opt,name=keyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type JwtFromJwkSetResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*JwtFromJwkSetResponse_Keyset) isJwtFromJwkSetResponse_Result() {}

func (*JwtFromJwkSetResponse_Err) isJwtFromJwkSetResponse_Result() {}

type DeriveKeysetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AnnotatedKeyset *AnnotatedKeyset `protobuf:"bytes,1,opt,name=annotated_keyset,json=annotatedKeyset,proto3" json:"annotated_keyset,omitempty"`
	Salt            []byte           `protobuf:"bytes,2,opt,name=salt,proto3" json:"salt,omitempty"`
}

func (x *DeriveKeysetRequest) Reset() {
	*x = DeriveKeysetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveKeysetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveKeysetRequest) ProtoMessage() {}

func (x *DeriveKeysetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveKeysetRequest.ProtoReflect.Descriptor instead.
func (*DeriveKeysetRequest) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{59}
}

func (x *DeriveKeysetRequest) GetAnnotatedKeyset() *AnnotatedKeyset {
	if x != nil {
		return x.AnnotatedKeyset
	}
	return nil
}

func (x *DeriveKeysetRequest) GetSalt() []byte {
	if x != nil {
		return x.Salt
	}
	return nil
}

type DeriveKeysetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*DeriveKeysetResponse_DerivedKeyset
	//	*DeriveKeysetResponse_Err
	Result isDeriveKeysetResponse_Result `protobuf_oneof:"result"`
}

func (x *DeriveKeysetResponse) Reset() {
	*x = DeriveKeysetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeriveKeysetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeriveKeysetResponse) ProtoMessage() {}

func (x *DeriveKeysetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeriveKeysetResponse.ProtoReflect.Descriptor instead.
func (*DeriveKeysetResponse) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{60}
}

func (m *DeriveKeysetResponse) GetResult() isDeriveKeysetResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DeriveKeysetResponse) GetDerivedKeyset() []byte {
	if x, ok := x.GetResult().(*DeriveKeysetResponse_DerivedKeyset); ok {
		return x.DerivedKeyset
	}
	return nil
}

func (x *DeriveKeysetResponse) GetErr() string {
	if x, ok := x.GetResult().(*DeriveKeysetResponse_Err); ok {
		return x.Err
	}
	return ""
}

type isDeriveKeysetResponse_Result interface {
	isDeriveKeysetResponse_Result()
}

type DeriveKeysetResponse_DerivedKeyset struct {
	DerivedKeyset []byte `protobuf:"bytes,1,opt,name=derived_keyset,json=derivedKeyset,proto3,oneof"` // serialized google.crypto.tink.Keyset.
}

type DeriveKeysetResponse_Err struct {
	Err string `protobuf:"bytes,2,opt,name=err,proto3,oneof"`
}

func (*DeriveKeysetResponse_DerivedKeyset) isDeriveKeysetResponse_Result() {}

func (*DeriveKeysetResponse_Err) isDeriveKeysetResponse_Result() {}

type PrfSetKeyIdsResponse_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryKeyId uint32   `protobuf:"varint,1,opt,name=primary_key_id,json=primaryKeyId,proto3" json:"primary_key_id,omitempty"`
	KeyId        []uint32 `protobuf:"varint,2,rep,packed,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *PrfSetKeyIdsResponse_Output) Reset() {
	*x = PrfSetKeyIdsResponse_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_go_protos_testing_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrfSetKeyIdsResponse_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrfSetKeyIdsResponse_Output) ProtoMessage() {}

func (x *PrfSetKeyIdsResponse_Output) ProtoReflect() protoreflect.Message {
	mi := &file_go_protos_testing_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrfSetKeyIdsResponse_Output.ProtoReflect.Descriptor instead.
func (*PrfSetKeyIdsResponse_Output) Descriptor() ([]byte, []int) {
	return file_go_protos_testing_api_proto_rawDescGZIP(), []int{45, 0}
}

func (x *PrfSetKeyIdsResponse_Output) GetPrimaryKeyId() uint32 {
	if x != nil {
		return x.PrimaryKeyId
	}
	return 0
}

func (x *PrfSetKeyIdsResponse_Output) GetKeyId() []uint32 {
	if x != nil {
		return x.KeyId
	}
	return nil
}

var File_go_protos_testing_api_proto protoreflect.FileDescriptor

var file_go_protos_testing_api_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x53, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x69, 0x6e, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0x3c, 0x0a, 0x15, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x16, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x33, 0x0a, 0x15, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x16, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65,
	0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x3c, 0x0a, 0x13,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x22, 0x5b, 0x0a, 0x14, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x2d, 0x0a, 0x13, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x54, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x22, 0x57, 0x0a, 0x14, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x54, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21,
	0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x38, 0x0a, 0x15, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a,
	0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x22, 0x50, 0x0a, 0x16, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x22, 0x0a, 0x0a, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x85, 0x02, 0x0a, 0x1a, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x45,
	0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x55, 0x0a, 0x1b, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xf3,
	0x01, 0x0a, 0x1b, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x61,
	0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x50, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x5f, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x69, 0x0a, 0x1c, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xd4, 0x01, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x54, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3e, 0x0a, 0x10, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xa9, 0x01,
	0x0a, 0x12, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x13, 0x41, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xab, 0x01, 0x0a, 0x12, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x53,
	0x0a, 0x13, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73,
	0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x20,
	0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xb8, 0x01, 0x0a, 0x1f, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x60, 0x0a, 0x20, 0x44,
	0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61, 0x64,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03,
	0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb2, 0x01,
	0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x65, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a,
	0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x5e, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52,
	0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x61, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x61, 0x73, 0x73, 0x6f, 0x63,
	0x69, 0x61, 0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x5c, 0x0a, 0x1c, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x51,
	0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x91, 0x01, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x61, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x25, 0x0a, 0x11, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d,
	0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x22, 0xb2, 0x01, 0x0a,
	0x14, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x57, 0x0a, 0x15, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x63, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x14, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x55, 0x0a, 0x15, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x5b, 0x0a, 0x18, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x16, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x55, 0x0a, 0x15, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x16,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x17, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x15, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x2b, 0x0a, 0x17, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72,
	0x22, 0x63, 0x0a, 0x13, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x22, 0xc4, 0x01, 0x0a, 0x14, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x1a, 0x45, 0x0a, 0x06, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79,
	0x49, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x01, 0x0a,
	0x14, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x4f,
	0x0a, 0x15, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x9a, 0x02, 0x0a, 0x0d, 0x4a, 0x77, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x3c, 0x0a, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f,
	0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0f, 0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x22, 0xef, 0x04, 0x0a,
	0x08, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12,
	0x36, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x6a, 0x77, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x6a, 0x77, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x6f, 0x74, 0x5f, 0x62, 0x65,
	0x66, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x6f, 0x74, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x12, 0x37, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x41, 0x74, 0x12, 0x51, 0x0a, 0x0d, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x12, 0x3d, 0x0a,
	0x0b, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x1a, 0x60, 0x0a, 0x11,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc8,
	0x04, 0x0a, 0x0c, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x4e, 0x0a, 0x14, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x65, 0x78, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x45, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x10, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69,
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x38, 0x0a,
	0x18, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x19, 0x65, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x5f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x68, 0x65, 0x5f,
	0x70, 0x61, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x64, 0x49, 0x6e, 0x54, 0x68, 0x65, 0x50, 0x61, 0x73,
	0x74, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12,
	0x38, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x65, 0x77, 0x22, 0x93, 0x01, 0x0a, 0x0e, 0x4a, 0x77,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x72, 0x61,
	0x77, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a,
	0x77, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x72, 0x61, 0x77, 0x4a, 0x77, 0x74, 0x22,
	0x5f, 0x0a, 0x0f, 0x4a, 0x77, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x63, 0x74, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4a,
	0x77, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0xcc, 0x01, 0x0a, 0x10, 0x4a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x63, 0x74, 0x5f, 0x6a, 0x77, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x4a, 0x77,
	0x74, 0x12, 0x3c, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x72, 0x0a, 0x11, 0x4a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x5f, 0x6a, 0x77, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77,
	0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x4a, 0x77, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x2c, 0x0a, 0x12, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x4a, 0x77, 0x6b, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x22, 0x4e, 0x0a, 0x13, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x6a, 0x77, 0x6b, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x6a, 0x77, 0x6b,
	0x53, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x2f, 0x0a, 0x14, 0x4a, 0x77, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x77, 0x6b, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6a, 0x77, 0x6b,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6a, 0x77, 0x6b, 0x53,
	0x65, 0x74, 0x22, 0x4f, 0x0a, 0x15, 0x4a, 0x77, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x77, 0x6b,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x6b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x06, 0x6b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x77, 0x0a, 0x13, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x10, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x0f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x22, 0x5d, 0x0a, 0x14,
	0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x6b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d,
	0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a,
	0x03, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x65, 0x72,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2a, 0x5f, 0x0a, 0x10, 0x4b,
	0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b, 0x45,
	0x59, 0x53, 0x45, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e, 0x41,
	0x52, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x53, 0x45, 0x54, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x5f, 0x0a, 0x10,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x4b, 0x45, 0x59, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45,
	0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4b,
	0x45, 0x59, 0x53, 0x45, 0x54, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x53, 0x45, 0x54, 0x5f,
	0x57, 0x52, 0x49, 0x54, 0x45, 0x52, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x02, 0x2a, 0x1b, 0x0a,
	0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x55,
	0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x00, 0x32, 0x68, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xc7, 0x05, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12,
	0x62, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x27,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x12,
	0x27, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73,
	0x65, 0x74, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x25,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x06, 0x54, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79,
	0x73, 0x65, 0x74, 0x54, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x54, 0x6f, 0x4a, 0x73, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x08, 0x46, 0x72,
	0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6e, 0x0a, 0x0d, 0x52,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2c, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65,
	0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x0e, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x2d, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x8d,
	0x02, 0x0a, 0x04, 0x41, 0x65, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x24, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x65, 0x61, 0x64, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xf2,
	0x02, 0x0a, 0x11, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x41, 0x65, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x18, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x6c, 0x79, 0x12, 0x31, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01,
	0x0a, 0x18, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x31, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65, 0x61, 0x64, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x65, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x41, 0x65,
	0x61, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0xba, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x41, 0x65, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x12, 0x2d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x41, 0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41,
	0x65, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12,
	0x2d, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x65, 0x61, 0x64,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x41, 0x65, 0x61, 0x64, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x8b, 0x02, 0x0a, 0x03, 0x4d, 0x61, 0x63, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0a, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x23, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x09, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x4d, 0x61, 0x63, 0x12, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x4d, 0x61, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x84,
	0x03, 0x0a, 0x06, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x12, 0x5e, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x12, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x12, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x89, 0x03, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x04, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x26, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x28, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x94, 0x02, 0x0a, 0x06, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x12, 0x51, 0x0a, 0x06,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x06, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x66,
	0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x72, 0x66, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe9, 0x06, 0x0a, 0x03, 0x4a, 0x77, 0x74,
	0x12, 0x57, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x77, 0x74, 0x4d, 0x61, 0x63,
	0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x16, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4a, 0x77, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53,
	0x69, 0x67, 0x6e, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x18,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4a, 0x77, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69,
	0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x41,
	0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x53,
	0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5f, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x63, 0x41, 0x6e, 0x64, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x16, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x41, 0x6e, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x74,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e,
	0x4a, 0x77, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x65, 0x0a, 0x18, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69,
	0x2e, 0x4a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x08, 0x54, 0x6f, 0x4a, 0x77,
	0x6b, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x54, 0x6f, 0x4a, 0x77, 0x6b,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77,
	0x74, 0x54, 0x6f, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0a, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x77, 0x6b, 0x53, 0x65,
	0x74, 0x12, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x77, 0x6b, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x77, 0x74,
	0x46, 0x72, 0x6f, 0x6d, 0x4a, 0x77, 0x6b, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x32, 0xc3, 0x01, 0x0a, 0x0d, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x44,
	0x65, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5f, 0x0a, 0x0c, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x74, 0x69, 0x6e, 0x6b,
	0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72,
	0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x74, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x66, 0x0a, 0x24, 0x63, 0x6f,
	0x6d, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x74, 0x69, 0x6e, 0x6b, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x69, 0x6e, 0x6b, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x6f, 0x5f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_go_protos_testing_api_proto_rawDescOnce sync.Once
	file_go_protos_testing_api_proto_rawDescData = file_go_protos_testing_api_proto_rawDesc
)

func file_go_protos_testing_api_proto_rawDescGZIP() []byte {
	file_go_protos_testing_api_proto_rawDescOnce.Do(func() {
		file_go_protos_testing_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_go_protos_testing_api_proto_rawDescData)
	})
	return file_go_protos_testing_api_proto_rawDescData
}

var file_go_protos_testing_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_go_protos_testing_api_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_go_protos_testing_api_proto_goTypes = []interface{}{
	(KeysetReaderType)(0),                    // 0: tink_testing_api.KeysetReaderType
	(KeysetWriterType)(0),                    // 1: tink_testing_api.KeysetWriterType
	(NullValue)(0),                           // 2: tink_testing_api.NullValue
	(*ServerInfoRequest)(nil),                // 3: tink_testing_api.ServerInfoRequest
	(*ServerInfoResponse)(nil),               // 4: tink_testing_api.ServerInfoResponse
	(*KeysetTemplateRequest)(nil),            // 5: tink_testing_api.KeysetTemplateRequest
	(*KeysetTemplateResponse)(nil),           // 6: tink_testing_api.KeysetTemplateResponse
	(*KeysetGenerateRequest)(nil),            // 7: tink_testing_api.KeysetGenerateRequest
	(*KeysetGenerateResponse)(nil),           // 8: tink_testing_api.KeysetGenerateResponse
	(*KeysetPublicRequest)(nil),              // 9: tink_testing_api.KeysetPublicRequest
	(*KeysetPublicResponse)(nil),             // 10: tink_testing_api.KeysetPublicResponse
	(*KeysetToJsonRequest)(nil),              // 11: tink_testing_api.KeysetToJsonRequest
	(*KeysetToJsonResponse)(nil),             // 12: tink_testing_api.KeysetToJsonResponse
	(*KeysetFromJsonRequest)(nil),            // 13: tink_testing_api.KeysetFromJsonRequest
	(*KeysetFromJsonResponse)(nil),           // 14: tink_testing_api.KeysetFromJsonResponse
	(*BytesValue)(nil),                       // 15: tink_testing_api.BytesValue
	(*KeysetReadEncryptedRequest)(nil),       // 16: tink_testing_api.KeysetReadEncryptedRequest
	(*KeysetReadEncryptedResponse)(nil),      // 17: tink_testing_api.KeysetReadEncryptedResponse
	(*KeysetWriteEncryptedRequest)(nil),      // 18: tink_testing_api.KeysetWriteEncryptedRequest
	(*KeysetWriteEncryptedResponse)(nil),     // 19: tink_testing_api.KeysetWriteEncryptedResponse
	(*AnnotatedKeyset)(nil),                  // 20: tink_testing_api.AnnotatedKeyset
	(*CreationRequest)(nil),                  // 21: tink_testing_api.CreationRequest
	(*CreationResponse)(nil),                 // 22: tink_testing_api.CreationResponse
	(*AeadEncryptRequest)(nil),               // 23: tink_testing_api.AeadEncryptRequest
	(*AeadEncryptResponse)(nil),              // 24: tink_testing_api.AeadEncryptResponse
	(*AeadDecryptRequest)(nil),               // 25: tink_testing_api.AeadDecryptRequest
	(*AeadDecryptResponse)(nil),              // 26: tink_testing_api.AeadDecryptResponse
	(*DeterministicAeadEncryptRequest)(nil),  // 27: tink_testing_api.DeterministicAeadEncryptRequest
	(*DeterministicAeadEncryptResponse)(nil), // 28: tink_testing_api.DeterministicAeadEncryptResponse
	(*DeterministicAeadDecryptRequest)(nil),  // 29: tink_testing_api.DeterministicAeadDecryptRequest
	(*DeterministicAeadDecryptResponse)(nil), // 30: tink_testing_api.DeterministicAeadDecryptResponse
	(*StreamingAeadEncryptRequest)(nil),      // 31: tink_testing_api.StreamingAeadEncryptRequest
	(*StreamingAeadEncryptResponse)(nil),     // 32: tink_testing_api.StreamingAeadEncryptResponse
	(*StreamingAeadDecryptRequest)(nil),      // 33: tink_testing_api.StreamingAeadDecryptRequest
	(*StreamingAeadDecryptResponse)(nil),     // 34: tink_testing_api.StreamingAeadDecryptResponse
	(*ComputeMacRequest)(nil),                // 35: tink_testing_api.ComputeMacRequest
	(*ComputeMacResponse)(nil),               // 36: tink_testing_api.ComputeMacResponse
	(*VerifyMacRequest)(nil),                 // 37: tink_testing_api.VerifyMacRequest
	(*VerifyMacResponse)(nil),                // 38: tink_testing_api.VerifyMacResponse
	(*HybridEncryptRequest)(nil),             // 39: tink_testing_api.HybridEncryptRequest
	(*HybridEncryptResponse)(nil),            // 40: tink_testing_api.HybridEncryptResponse
	(*HybridDecryptRequest)(nil),             // 41: tink_testing_api.HybridDecryptRequest
	(*HybridDecryptResponse)(nil),            // 42: tink_testing_api.HybridDecryptResponse
	(*SignatureSignRequest)(nil),             // 43: tink_testing_api.SignatureSignRequest
	(*SignatureSignResponse)(nil),            // 44: tink_testing_api.SignatureSignResponse
	(*SignatureVerifyRequest)(nil),           // 45: tink_testing_api.SignatureVerifyRequest
	(*SignatureVerifyResponse)(nil),          // 46: tink_testing_api.SignatureVerifyResponse
	(*PrfSetKeyIdsRequest)(nil),              // 47: tink_testing_api.PrfSetKeyIdsRequest
	(*PrfSetKeyIdsResponse)(nil),             // 48: tink_testing_api.PrfSetKeyIdsResponse
	(*PrfSetComputeRequest)(nil),             // 49: tink_testing_api.PrfSetComputeRequest
	(*PrfSetComputeResponse)(nil),            // 50: tink_testing_api.PrfSetComputeResponse
	(*JwtClaimValue)(nil),                    // 51: tink_testing_api.JwtClaimValue
	(*JwtToken)(nil),                         // 52: tink_testing_api.JwtToken
	(*JwtValidator)(nil),                     // 53: tink_testing_api.JwtValidator
	(*JwtSignRequest)(nil),                   // 54: tink_testing_api.JwtSignRequest
	(*JwtSignResponse)(nil),                  // 55: tink_testing_api.JwtSignResponse
	(*JwtVerifyRequest)(nil),                 // 56: tink_testing_api.JwtVerifyRequest
	(*JwtVerifyResponse)(nil),                // 57: tink_testing_api.JwtVerifyResponse
	(*JwtToJwkSetRequest)(nil),               // 58: tink_testing_api.JwtToJwkSetRequest
	(*JwtToJwkSetResponse)(nil),              // 59: tink_testing_api.JwtToJwkSetResponse
	(*JwtFromJwkSetRequest)(nil),             // 60: tink_testing_api.JwtFromJwkSetRequest
	(*JwtFromJwkSetResponse)(nil),            // 61: tink_testing_api.JwtFromJwkSetResponse
	(*DeriveKeysetRequest)(nil),              // 62: tink_testing_api.DeriveKeysetRequest
	(*DeriveKeysetResponse)(nil),             // 63: tink_testing_api.DeriveKeysetResponse
	nil,                                      // 64: tink_testing_api.AnnotatedKeyset.AnnotationsEntry
	(*PrfSetKeyIdsResponse_Output)(nil),      // 65: tink_testing_api.PrfSetKeyIdsResponse.Output
	nil,                                      // 66: tink_testing_api.JwtToken.CustomClaimsEntry
	(*wrapperspb.StringValue)(nil),           // 67: google.protobuf.StringValue
	(*timestamppb.Timestamp)(nil),            // 68: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),              // 69: google.protobuf.Duration
}
var file_go_protos_testing_api_proto_depIdxs = []int32{
	15, // 0: tink_testing_api.KeysetReadEncryptedRequest.associated_data:type_name -> tink_testing_api.BytesValue
	0,  // 1: tink_testing_api.KeysetReadEncryptedRequest.keyset_reader_type:type_name -> tink_testing_api.KeysetReaderType
	15, // 2: tink_testing_api.KeysetWriteEncryptedRequest.associated_data:type_name -> tink_testing_api.BytesValue
	1,  // 3: tink_testing_api.KeysetWriteEncryptedRequest.keyset_writer_type:type_name -> tink_testing_api.KeysetWriterType
	64, // 4: tink_testing_api.AnnotatedKeyset.annotations:type_name -> tink_testing_api.AnnotatedKeyset.AnnotationsEntry
	20, // 5: tink_testing_api.CreationRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 6: tink_testing_api.AeadEncryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 7: tink_testing_api.AeadDecryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 8: tink_testing_api.DeterministicAeadEncryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 9: tink_testing_api.DeterministicAeadDecryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 10: tink_testing_api.StreamingAeadEncryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 11: tink_testing_api.StreamingAeadDecryptRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 12: tink_testing_api.ComputeMacRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 13: tink_testing_api.VerifyMacRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 14: tink_testing_api.HybridEncryptRequest.public_annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 15: tink_testing_api.HybridDecryptRequest.private_annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 16: tink_testing_api.SignatureSignRequest.private_annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 17: tink_testing_api.SignatureVerifyRequest.public_annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	20, // 18: tink_testing_api.PrfSetKeyIdsRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	65, // 19: tink_testing_api.PrfSetKeyIdsResponse.output:type_name -> tink_testing_api.PrfSetKeyIdsResponse.Output
	20, // 20: tink_testing_api.PrfSetComputeRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	2,  // 21: tink_testing_api.JwtClaimValue.null_value:type_name -> tink_testing_api.NullValue
	67, // 22: tink_testing_api.JwtToken.issuer:type_name -> google.protobuf.StringValue
	67, // 23: tink_testing_api.JwtToken.subject:type_name -> google.protobuf.StringValue
	67, // 24: tink_testing_api.JwtToken.jwt_id:type_name -> google.protobuf.StringValue
	68, // 25: tink_testing_api.JwtToken.expiration:type_name -> google.protobuf.Timestamp
	68, // 26: tink_testing_api.JwtToken.not_before:type_name -> google.protobuf.Timestamp
	68, // 27: tink_testing_api.JwtToken.issued_at:type_name -> google.protobuf.Timestamp
	66, // 28: tink_testing_api.JwtToken.custom_claims:type_name -> tink_testing_api.JwtToken.CustomClaimsEntry
	67, // 29: tink_testing_api.JwtToken.type_header:type_name -> google.protobuf.StringValue
	67, // 30: tink_testing_api.JwtValidator.expected_type_header:type_name -> google.protobuf.StringValue
	67, // 31: tink_testing_api.JwtValidator.expected_issuer:type_name -> google.protobuf.StringValue
	67, // 32: tink_testing_api.JwtValidator.expected_audience:type_name -> google.protobuf.StringValue
	68, // 33: tink_testing_api.JwtValidator.now:type_name -> google.protobuf.Timestamp
	69, // 34: tink_testing_api.JwtValidator.clock_skew:type_name -> google.protobuf.Duration
	20, // 35: tink_testing_api.JwtSignRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	52, // 36: tink_testing_api.JwtSignRequest.raw_jwt:type_name -> tink_testing_api.JwtToken
	20, // 37: tink_testing_api.JwtVerifyRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	53, // 38: tink_testing_api.JwtVerifyRequest.validator:type_name -> tink_testing_api.JwtValidator
	52, // 39: tink_testing_api.JwtVerifyResponse.verified_jwt:type_name -> tink_testing_api.JwtToken
	20, // 40: tink_testing_api.DeriveKeysetRequest.annotated_keyset:type_name -> tink_testing_api.AnnotatedKeyset
	51, // 41: tink_testing_api.JwtToken.CustomClaimsEntry.value:type_name -> tink_testing_api.JwtClaimValue
	3,  // 42: tink_testing_api.Metadata.GetServerInfo:input_type -> tink_testing_api.ServerInfoRequest
	5,  // 43: tink_testing_api.Keyset.GetTemplate:input_type -> tink_testing_api.KeysetTemplateRequest
	7,  // 44: tink_testing_api.Keyset.Generate:input_type -> tink_testing_api.KeysetGenerateRequest
	9,  // 45: tink_testing_api.Keyset.Public:input_type -> tink_testing_api.KeysetPublicRequest
	11, // 46: tink_testing_api.Keyset.ToJson:input_type -> tink_testing_api.KeysetToJsonRequest
	13, // 47: tink_testing_api.Keyset.FromJson:input_type -> tink_testing_api.KeysetFromJsonRequest
	16, // 48: tink_testing_api.Keyset.ReadEncrypted:input_type -> tink_testing_api.KeysetReadEncryptedRequest
	18, // 49: tink_testing_api.Keyset.WriteEncrypted:input_type -> tink_testing_api.KeysetWriteEncryptedRequest
	21, // 50: tink_testing_api.Aead.Create:input_type -> tink_testing_api.CreationRequest
	23, // 51: tink_testing_api.Aead.Encrypt:input_type -> tink_testing_api.AeadEncryptRequest
	25, // 52: tink_testing_api.Aead.Decrypt:input_type -> tink_testing_api.AeadDecryptRequest
	21, // 53: tink_testing_api.DeterministicAead.Create:input_type -> tink_testing_api.CreationRequest
	27, // 54: tink_testing_api.DeterministicAead.EncryptDeterministically:input_type -> tink_testing_api.DeterministicAeadEncryptRequest
	29, // 55: tink_testing_api.DeterministicAead.DecryptDeterministically:input_type -> tink_testing_api.DeterministicAeadDecryptRequest
	21, // 56: tink_testing_api.StreamingAead.Create:input_type -> tink_testing_api.CreationRequest
	31, // 57: tink_testing_api.StreamingAead.Encrypt:input_type -> tink_testing_api.StreamingAeadEncryptRequest
	33, // 58: tink_testing_api.StreamingAead.Decrypt:input_type -> tink_testing_api.StreamingAeadDecryptRequest
	21, // 59: tink_testing_api.Mac.Create:input_type -> tink_testing_api.CreationRequest
	35, // 60: tink_testing_api.Mac.ComputeMac:input_type -> tink_testing_api.ComputeMacRequest
	37, // 61: tink_testing_api.Mac.VerifyMac:input_type -> tink_testing_api.VerifyMacRequest
	21, // 62: tink_testing_api.Hybrid.CreateHybridEncrypt:input_type -> tink_testing_api.CreationRequest
	21, // 63: tink_testing_api.Hybrid.CreateHybridDecrypt:input_type -> tink_testing_api.CreationRequest
	39, // 64: tink_testing_api.Hybrid.Encrypt:input_type -> tink_testing_api.HybridEncryptRequest
	41, // 65: tink_testing_api.Hybrid.Decrypt:input_type -> tink_testing_api.HybridDecryptRequest
	21, // 66: tink_testing_api.Signature.CreatePublicKeySign:input_type -> tink_testing_api.CreationRequest
	21, // 67: tink_testing_api.Signature.CreatePublicKeyVerify:input_type -> tink_testing_api.CreationRequest
	43, // 68: tink_testing_api.Signature.Sign:input_type -> tink_testing_api.SignatureSignRequest
	45, // 69: tink_testing_api.Signature.Verify:input_type -> tink_testing_api.SignatureVerifyRequest
	21, // 70: tink_testing_api.PrfSet.Create:input_type -> tink_testing_api.CreationRequest
	47, // 71: tink_testing_api.PrfSet.KeyIds:input_type -> tink_testing_api.PrfSetKeyIdsRequest
	49, // 72: tink_testing_api.PrfSet.Compute:input_type -> tink_testing_api.PrfSetComputeRequest
	21, // 73: tink_testing_api.Jwt.CreateJwtMac:input_type -> tink_testing_api.CreationRequest
	21, // 74: tink_testing_api.Jwt.CreateJwtPublicKeySign:input_type -> tink_testing_api.CreationRequest
	21, // 75: tink_testing_api.Jwt.CreateJwtPublicKeyVerify:input_type -> tink_testing_api.CreationRequest
	54, // 76: tink_testing_api.Jwt.ComputeMacAndEncode:input_type -> tink_testing_api.JwtSignRequest
	56, // 77: tink_testing_api.Jwt.VerifyMacAndDecode:input_type -> tink_testing_api.JwtVerifyRequest
	54, // 78: tink_testing_api.Jwt.PublicKeySignAndEncode:input_type -> tink_testing_api.JwtSignRequest
	56, // 79: tink_testing_api.Jwt.PublicKeyVerifyAndDecode:input_type -> tink_testing_api.JwtVerifyRequest
	58, // 80: tink_testing_api.Jwt.ToJwkSet:input_type -> tink_testing_api.JwtToJwkSetRequest
	60, // 81: tink_testing_api.Jwt.FromJwkSet:input_type -> tink_testing_api.JwtFromJwkSetRequest
	21, // 82: tink_testing_api.KeysetDeriver.Create:input_type -> tink_testing_api.CreationRequest
	62, // 83: tink_testing_api.KeysetDeriver.DeriveKeyset:input_type -> tink_testing_api.DeriveKeysetRequest
	4,  // 84: tink_testing_api.Metadata.GetServerInfo:output_type -> tink_testing_api.ServerInfoResponse
	6,  // 85: tink_testing_api.Keyset.GetTemplate:output_type -> tink_testing_api.KeysetTemplateResponse
	8,  // 86: tink_testing_api.Keyset.Generate:output_type -> tink_testing_api.KeysetGenerateResponse
	10, // 87: tink_testing_api.Keyset.Public:output_type -> tink_testing_api.KeysetPublicResponse
	12, // 88: tink_testing_api.Keyset.ToJson:output_type -> tink_testing_api.KeysetToJsonResponse
	14, // 89: tink_testing_api.Keyset.FromJson:output_type -> tink_testing_api.KeysetFromJsonResponse
	17, // 90: tink_testing_api.Keyset.ReadEncrypted:output_type -> tink_testing_api.KeysetReadEncryptedResponse
	19, // 91: tink_testing_api.Keyset.WriteEncrypted:output_type -> tink_testing_api.KeysetWriteEncryptedResponse
	22, // 92: tink_testing_api.Aead.Create:output_type -> tink_testing_api.CreationResponse
	24, // 93: tink_testing_api.Aead.Encrypt:output_type -> tink_testing_api.AeadEncryptResponse
	26, // 94: tink_testing_api.Aead.Decrypt:output_type -> tink_testing_api.AeadDecryptResponse
	22, // 95: tink_testing_api.DeterministicAead.Create:output_type -> tink_testing_api.CreationResponse
	28, // 96: tink_testing_api.DeterministicAead.EncryptDeterministically:output_type -> tink_testing_api.DeterministicAeadEncryptResponse
	30, // 97: tink_testing_api.DeterministicAead.DecryptDeterministically:output_type -> tink_testing_api.DeterministicAeadDecryptResponse
	22, // 98: tink_testing_api.StreamingAead.Create:output_type -> tink_testing_api.CreationResponse
	32, // 99: tink_testing_api.StreamingAead.Encrypt:output_type -> tink_testing_api.StreamingAeadEncryptResponse
	34, // 100: tink_testing_api.StreamingAead.Decrypt:output_type -> tink_testing_api.StreamingAeadDecryptResponse
	22, // 101: tink_testing_api.Mac.Create:output_type -> tink_testing_api.CreationResponse
	36, // 102: tink_testing_api.Mac.ComputeMac:output_type -> tink_testing_api.ComputeMacResponse
	38, // 103: tink_testing_api.Mac.VerifyMac:output_type -> tink_testing_api.VerifyMacResponse
	22, // 104: tink_testing_api.Hybrid.CreateHybridEncrypt:output_type -> tink_testing_api.CreationResponse
	22, // 105: tink_testing_api.Hybrid.CreateHybridDecrypt:output_type -> tink_testing_api.CreationResponse
	40, // 106: tink_testing_api.Hybrid.Encrypt:output_type -> tink_testing_api.HybridEncryptResponse
	42, // 107: tink_testing_api.Hybrid.Decrypt:output_type -> tink_testing_api.HybridDecryptResponse
	22, // 108: tink_testing_api.Signature.CreatePublicKeySign:output_type -> tink_testing_api.CreationResponse
	22, // 109: tink_testing_api.Signature.CreatePublicKeyVerify:output_type -> tink_testing_api.CreationResponse
	44, // 110: tink_testing_api.Signature.Sign:output_type -> tink_testing_api.SignatureSignResponse
	46, // 111: tink_testing_api.Signature.Verify:output_type -> tink_testing_api.SignatureVerifyResponse
	22, // 112: tink_testing_api.PrfSet.Create:output_type -> tink_testing_api.CreationResponse
	48, // 113: tink_testing_api.PrfSet.KeyIds:output_type -> tink_testing_api.PrfSetKeyIdsResponse
	50, // 114: tink_testing_api.PrfSet.Compute:output_type -> tink_testing_api.PrfSetComputeResponse
	22, // 115: tink_testing_api.Jwt.CreateJwtMac:output_type -> tink_testing_api.CreationResponse
	22, // 116: tink_testing_api.Jwt.CreateJwtPublicKeySign:output_type -> tink_testing_api.CreationResponse
	22, // 117: tink_testing_api.Jwt.CreateJwtPublicKeyVerify:output_type -> tink_testing_api.CreationResponse
	55, // 118: tink_testing_api.Jwt.ComputeMacAndEncode:output_type -> tink_testing_api.JwtSignResponse
	57, // 119: tink_testing_api.Jwt.VerifyMacAndDecode:output_type -> tink_testing_api.JwtVerifyResponse
	55, // 120: tink_testing_api.Jwt.PublicKeySignAndEncode:output_type -> tink_testing_api.JwtSignResponse
	57, // 121: tink_testing_api.Jwt.PublicKeyVerifyAndDecode:output_type -> tink_testing_api.JwtVerifyResponse
	59, // 122: tink_testing_api.Jwt.ToJwkSet:output_type -> tink_testing_api.JwtToJwkSetResponse
	61, // 123: tink_testing_api.Jwt.FromJwkSet:output_type -> tink_testing_api.JwtFromJwkSetResponse
	22, // 124: tink_testing_api.KeysetDeriver.Create:output_type -> tink_testing_api.CreationResponse
	63, // 125: tink_testing_api.KeysetDeriver.DeriveKeyset:output_type -> tink_testing_api.DeriveKeysetResponse
	84, // [84:126] is the sub-list for method output_type
	42, // [42:84] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_go_protos_testing_api_proto_init() }
func file_go_protos_testing_api_proto_init() {
	if File_go_protos_testing_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_go_protos_testing_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetTemplateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetTemplateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetGenerateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetGenerateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetPublicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetPublicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetToJsonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetToJsonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetFromJsonRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetFromJsonResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetReadEncryptedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetReadEncryptedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetWriteEncryptedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeysetWriteEncryptedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnnotatedKeyset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AeadEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AeadEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AeadDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AeadDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeterministicAeadEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeterministicAeadEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeterministicAeadDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeterministicAeadDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAeadEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAeadEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAeadDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamingAeadDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMacRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyMacResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEncryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridEncryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridDecryptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HybridDecryptResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrfSetKeyIdsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrfSetKeyIdsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrfSetComputeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrfSetComputeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtClaimValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtValidator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtVerifyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtToJwkSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtToJwkSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtFromJwkSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JwtFromJwkSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveKeysetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeriveKeysetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_go_protos_testing_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrfSetKeyIdsResponse_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_go_protos_testing_api_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*KeysetTemplateResponse_KeyTemplate)(nil),
		(*KeysetTemplateResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*KeysetGenerateResponse_Keyset)(nil),
		(*KeysetGenerateResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*KeysetPublicResponse_PublicKeyset)(nil),
		(*KeysetPublicResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*KeysetToJsonResponse_JsonKeyset)(nil),
		(*KeysetToJsonResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*KeysetFromJsonResponse_Keyset)(nil),
		(*KeysetFromJsonResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*KeysetReadEncryptedResponse_Keyset)(nil),
		(*KeysetReadEncryptedResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*KeysetWriteEncryptedResponse_EncryptedKeyset)(nil),
		(*KeysetWriteEncryptedResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*AeadEncryptResponse_Ciphertext)(nil),
		(*AeadEncryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*AeadDecryptResponse_Plaintext)(nil),
		(*AeadDecryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*DeterministicAeadEncryptResponse_Ciphertext)(nil),
		(*DeterministicAeadEncryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*DeterministicAeadDecryptResponse_Plaintext)(nil),
		(*DeterministicAeadDecryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*StreamingAeadEncryptResponse_Ciphertext)(nil),
		(*StreamingAeadEncryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*StreamingAeadDecryptResponse_Plaintext)(nil),
		(*StreamingAeadDecryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*ComputeMacResponse_MacValue)(nil),
		(*ComputeMacResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*HybridEncryptResponse_Ciphertext)(nil),
		(*HybridEncryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*HybridDecryptResponse_Plaintext)(nil),
		(*HybridDecryptResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[41].OneofWrappers = []interface{}{
		(*SignatureSignResponse_Signature)(nil),
		(*SignatureSignResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*PrfSetKeyIdsResponse_Output_)(nil),
		(*PrfSetKeyIdsResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*PrfSetComputeResponse_Output)(nil),
		(*PrfSetComputeResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[48].OneofWrappers = []interface{}{
		(*JwtClaimValue_NullValue)(nil),
		(*JwtClaimValue_NumberValue)(nil),
		(*JwtClaimValue_StringValue)(nil),
		(*JwtClaimValue_BoolValue)(nil),
		(*JwtClaimValue_JsonObjectValue)(nil),
		(*JwtClaimValue_JsonArrayValue)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*JwtSignResponse_SignedCompactJwt)(nil),
		(*JwtSignResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*JwtVerifyResponse_VerifiedJwt)(nil),
		(*JwtVerifyResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[56].OneofWrappers = []interface{}{
		(*JwtToJwkSetResponse_JwkSet)(nil),
		(*JwtToJwkSetResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*JwtFromJwkSetResponse_Keyset)(nil),
		(*JwtFromJwkSetResponse_Err)(nil),
	}
	file_go_protos_testing_api_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*DeriveKeysetResponse_DerivedKeyset)(nil),
		(*DeriveKeysetResponse_Err)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_go_protos_testing_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   11,
		},
		GoTypes:           file_go_protos_testing_api_proto_goTypes,
		DependencyIndexes: file_go_protos_testing_api_proto_depIdxs,
		EnumInfos:         file_go_protos_testing_api_proto_enumTypes,
		MessageInfos:      file_go_protos_testing_api_proto_msgTypes,
	}.Build()
	File_go_protos_testing_api_proto = out.File
	file_go_protos_testing_api_proto_rawDesc = nil
	file_go_protos_testing_api_proto_goTypes = nil
	file_go_protos_testing_api_proto_depIdxs = nil
}
